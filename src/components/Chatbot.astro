---
// La sección del servidor de Astro se queda vacía.
---

<!-- ============================================= -->
<!--   1. SECCIÓN DE HTML (Solo lo necesario)      -->
<!-- ============================================= -->

<!-- Botón flotante del chatbot -->
<div id="chatbot-button" class="chatbot-button">
    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M12 2C6.48 2 2 6.48 2 12C2 13.54 2.36 14.99 3.01 16.28L2 22L7.72 20.99C9.01 21.64 10.46 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C10.74 20 9.54 19.75 8.5 19.3L8.19 19.14L4.55 20.05L5.46 16.41L5.3 16.1C4.85 15.06 4.6 13.86 4.6 12.6C4.6 7.91 8.31 4.2 13 4.2C17.69 4.2 21.4 7.91 21.4 12.6C21.4 17.29 17.69 21 13 21H12V20Z" fill="white"/>
    </svg>
</div>

<!-- Ventana del chatbot -->
<div id="chatbot-window" class="chatbot-window">
    <div class="chatbot-header">
        <h3>Botabél</h3>
        <button id="close-chat" class="close-button">×</button>
    </div>
    <div id="chat-messages" class="chat-messages">
        <!-- Los mensajes aparecerán aquí -->
    </div>
    <div class="chat-input-container">
        <input type="text" id="chat-input" placeholder="Escribe tu pregunta..." />
        <button id="send-button">Enviar</button>
    </div>
    <div id="typing-indicator" class="typing-indicator" style="display: none;">
        <span></span>
        <span></span>
        <span></span>
    </div>
</div>


<!-- ============================================= -->
<!--   2. SECCIÓN DE CSS (Con "is:global")         -->
<!-- ============================================= -->
<style is:global>
    /* El atributo "is:global" es necesario para que estos estilos 
    afecten a los elementos por su ID, ya que Astro normalmente 
    aísla los estilos. */

    .chatbot-button {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 60px;
        height: 60px;
        background: linear-gradient(135deg, #ff6e06 0%, #efff11 100%);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        transition: all 0.3s ease;
        z-index: 1000;
    }
    .chatbot-button:hover {
        transform: scale(1.1);
        box-shadow: 0 6px 25px rgba(0, 0, 0, 0.4);
    }
    .chatbot-button svg {
        width: 28px;
        height: 28px;
    }
    .chatbot-window {
        position: fixed;
        bottom: 90px;
        right: 20px;
        width: 350px;
        height: 500px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        display: none;
        flex-direction: column;
        z-index: 1001;
        overflow: hidden;
    }
    .chatbot-window.active {
        display: flex;
    }
    .chatbot-header {
        background: linear-gradient(135deg, #667eea 0%, #0d34fa 100%);
        color: white;
        padding: 15px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .chatbot-header h3 {
        margin: 0;
        font-size: 18px;
        font-weight: 600;
    }
    .close-button {
        background: none;
        border: none;
        color: white;
        font-size: 24px;
        cursor: pointer;
        padding: 0;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: background-color 0.3s ease;
    }
    .close-button:hover {
        background-color: rgba(255, 255, 255, 0.2);
    }
    .chat-messages {
        flex: 1;
        padding: 20px;
        overflow-y: auto;
        background-color: #f8f9fa;
    }
    .chat-messages::-webkit-scrollbar {
        width: 6px;
    }
    .chat-messages::-webkit-scrollbar-track {
        background: #f1f1f1;
    }
    .chat-messages::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 10px;
    }
    .chat-messages::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
    }
    .message {
        margin-bottom: 15px;
        animation: fadeIn 0.3s ease;
    }
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    .message.user {
        text-align: right;
    }
    .message.bot {
        text-align: left;
    }
    .message-content {
        display: inline-block;
        max-width: 80%;
        padding: 12px 16px;
        border-radius: 18px;
        font-size: 14px;
        line-height: 1.4;
        word-wrap: break-word;
    }
    .message.user .message-content {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }
    .message.bot .message-content {
        background: white;
        color: #333;
        border: 1px solid #e0e0e0;
    }
    .chat-input-container {
        display: flex;
        padding: 20px;
        background: white;
        border-top: 1px solid #e0e0e0;
    }
    #chat-input {
        flex: 1;
        padding: 12px 16px;
        border: 2px solid #e0e0e0;
        border-radius: 25px;
        font-size: 14px;
        outline: none;
        transition: border-color 0.3s ease;
    }
    #chat-input:focus {
        border-color: #667eea;
    }
    #send-button {
        margin-left: 10px;
        padding: 12px 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 25px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 600;
        transition: all 0.3s ease;
    }
    #send-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
    }
    #send-button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }
    .typing-indicator {
        padding: 10px 20px;
        background: white;
        border-top: 1px solid #e0e0e0;
        display: flex;
        align-items: center;
    }
    .typing-indicator span {
        display: inline-block;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background-color: #667eea;
        margin-right: 4px;
        animation: typing 1.4s infinite;
    }
    .typing-indicator span:nth-child(2) {
        animation-delay: 0.2s;
    }
    .typing-indicator span:nth-child(3) {
        animation-delay: 0.4s;
    }
    @keyframes typing {
        0%, 60%, 100% {
            transform: translateY(0);
            opacity: 0.4;
        }
        30% {
            transform: translateY(-10px);
            opacity: 1;
        }
    }
    @media (max-width: 768px) {
        .chatbot-window {
            width: 90%;
            right: 5%;
            left: 5%;
            bottom: 90px;
        }
        .chatbot-button {
            bottom: 15px;
            right: 15px;
            width: 50px;
            height: 50px;
        }
        .chatbot-button svg {
            width: 24px;
            height: 24px;
        }
    }
</style>


<script>
// --- SCRIPT COMPLETO Y CORRECTO PARA LA ARQUITECTURA SEGURA ---

document.addEventListener('astro:page-load', () => {

// ==========================================================
//  1. DECLARACIÓN DE ELEMENTOS DEL DOM
// ==========================================================
const chatButton = document.getElementById('chatbot-button');
const closeButton = document.getElementById('close-chat');
const chatWindow = document.getElementById('chatbot-window');
const chatMessages = document.getElementById('chat-messages');
const chatInput = document.getElementById('chat-input') as HTMLInputElement;
const sendButton = document.getElementById('send-button') as HTMLButtonElement;
const typingIndicator = document.getElementById('typing-indicator');

let isProcessing = false;
let welcomeMessageShown = false;

// ==========================================================
//  2. CONFIGURACIÓN Y CONTEXTO
// ==========================================================
const API_URL = '/api/chat'; // <-- ¡APUNTAMOS A NUESTRA API SEGURA!

const CONTEXT = `
Eres Botabél, un asistente virtual amigable, profesional y muy servicial.
(Aquí va todo tu contexto de información que ya tienes...)
`;

// ==========================================================
//  3. LÓGICA DE INICIALIZACIÓN Y EVENTOS
// ==========================================================

if (chatButton && chatWindow && closeButton && sendButton && chatInput && chatMessages && typingIndicator) {
    chatButton.addEventListener('click', openChat);
    closeButton.addEventListener('click', closeChat);
    sendButton.addEventListener('click', sendMessage);
    chatInput.addEventListener('keypress', handleKeyPress);
    
    // El formulario también puede manejar el envío
    const chatForm = chatInput.closest('form');
    if(chatForm) {
        chatForm.addEventListener('submit', (e) => {
            e.preventDefault();
            sendMessage();
        });
    }

} else {
    console.error('Error al inicializar el chatbot: No se encontraron todos los elementos necesarios en el DOM.');
}

function openChat() {
    if (!chatWindow) return;
    chatWindow.classList.add('is-open'); // Usamos la clase correcta
    if (!welcomeMessageShown) {
        showWelcomeMessage();
        welcomeMessageShown = true;
    }
    chatInput?.focus(); 
}

function closeChat() {
    if (!chatWindow) return;
    chatWindow.classList.remove('is-open'); // Usamos la clase correcta
}

function handleKeyPress(event: KeyboardEvent) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        sendMessage();
    }
}

function showWelcomeMessage() {
    addMessage("¡Hola! Soy Botabél, tu asistente virtual. ¿En qué puedo ayudarte hoy?", 'bot');
}

function addMessage(text: string, sender: 'user' | 'bot') {
    if (!chatMessages) return;
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}`;
    const messageContent = document.createElement('div');
    messageContent.className = 'message-content';
    messageContent.textContent = text;
    messageDiv.appendChild(messageContent);
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function showTypingIndicator() {
    if (typingIndicator) typingIndicator.style.display = 'flex';
    if (chatMessages) chatMessages.scrollTop = chatMessages.scrollHeight;
}

function hideTypingIndicator() {
    if (typingIndicator) typingIndicator.style.display = 'none';
}

function disableInput() {
    if (chatInput) chatInput.disabled = true;
    if (sendButton) sendButton.disabled = true;
    isProcessing = true;
}

function enableInput() {
    if (chatInput) chatInput.disabled = false;
    if (sendButton) sendButton.disabled = false;
    isProcessing = false;
    chatInput?.focus();
}

async function sendMessage() {
    if (!chatInput || !sendButton || isProcessing || !chatInput.value) return;

    const userMessage = chatInput.value.trim();
    if (!userMessage) return;
    
    addMessage(userMessage, 'user');
    chatInput.value = '';
    
    disableInput();
    showTypingIndicator();
    
    try {
        // Esta es la llamada a nuestro backend seguro
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                userMessage: userMessage,
                context: CONTEXT
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Error desconocido del servidor');
        }
        
        const data = await response.json();
        hideTypingIndicator();
        addMessage(data.reply, 'bot');
        
    } catch (error) {
        console.error('Error al llamar a la API:', error);
        hideTypingIndicator();
        const errorMessage = error instanceof Error ? error.message : 'Lo siento, hubo un problema de conexión.';
        addMessage(errorMessage, 'bot');
    }
    
    enableInput();
}
});
</script>