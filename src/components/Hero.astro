---
// Asegúrate de cambiar 'nueva-imagen-hero.webp' por el nombre de tu nueva imagen
import heroImage from '../assets/nueva-imagen-hero.png'; 
---
<!-- Se pasa la imagen como variable CSS para usarla en un pseudo-elemento y aislar el efecto espejo -->
<section id="hero-section" style={`--bg-image: url(${heroImage.src});`}>
    <div class="hero-overlay"></div>

    <!-- El contenido ya no necesita ser "des-invertido" -->
    <div class="hero-content">
        <h1 class="hero-title animate-on-scroll">Protegiendo tu presente,</h1>
        
        <h1 class="hero-subtitle animate-on-scroll" data-delay="0.3" id="subtitle-hero">Construyendo tu futuro.</h1>
    </div>
    
    <!-- Indicateur de scroll animé -->
    <div class="scroll-indicator animate-on-scroll" data-delay="1">
        <div class="scroll-arrow"></div>
    </div>
</section>

<style>
    html, body {
        overflow-x: hidden;
        width: 100vw;
        max-width: 100vw;
    }

    #hero-section {
        position: relative;
        min-height: 100vh;  
        color: var(--blanco-puro);
        
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        padding: 2rem;
        isolation: isolate;
    }

    /* Se usa un pseudo-elemento para el fondo para aplicar el efecto espejo de forma aislada */
    #hero-section::before {
        content: '';
        position: absolute;
        inset: 0;
        z-index: -2;
        background-image: var(--bg-image);
        background-size: cover;
        background-position: center calc(var(--parallax-offset-y, 0px) + 50%);
        background-repeat: no-repeat;
        transform: scaleX(-1);
        animation: hero-zoom 20s ease-in-out infinite alternate;
        will-change: background-position;
    }

    @keyframes hero-zoom {
        0% { transform: scaleX(-1) scale(1); }
        100% { transform: scaleX(-1) scale(1.05); }
    }

    .hero-overlay {
        position: absolute;
        inset: 0;
        background: rgba(17, 17, 17, 0.5);
        z-index: -1;
    }

    .hero-content {
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }

    .hero-title {
        font-size: 7rem;
        font-weight: 900;
        line-height: 1;
        color: var(--blanco-puro);
        text-shadow: 0 4px 15px rgba(0, 0, 0, 0.4);
        opacity: 0;
        transform: translateY(50px);
        transition: all 0.8s ease;
    }

    .hero-title.animate-in {
        opacity: 1;
        transform: translateY(0);
    }

    .hero-subtitle {
        font-size: 2.5rem;
        font-weight: 400;
        color: var(--blanco-puro);
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        opacity: 0;
        transform: translateY(30px);
        transition: all 0.8s ease;
    }

    .hero-subtitle.animate-in {
        opacity: 1;
        transform: translateY(0);
    }

    .scroll-indicator {
        position: absolute;
        bottom: 2rem;
        left: 50%;
        transform: translateX(-50%);
        opacity: 0;
        transition: all 0.8s ease;
    }

    .scroll-indicator.animate-in {
        opacity: 1;
    }

    .scroll-arrow {
        width: 2px;
        height: 30px;
        background-color: white;
        position: relative;
        animation: scroll-bounce 2s infinite;
    }

    .scroll-arrow::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 0;
        height: 0;
        border-left: 6px solid transparent;
        border-right: 6px solid transparent;
        border-top: 8px solid white;
    }

    @keyframes scroll-bounce {
        0%, 20%, 50%, 80%, 100% {
            transform: translateY(0);
        }
        40% {
            transform: translateY(-10px);
        }
        60% {
            transform: translateY(-5px);
        }
    }

    @media (max-width: 768px) {
        .hero-title { 
            font-size: 3.7rem; 
        }

        .hero-subtitle {
            font-size: 1.6rem;
        }

        #hero-section::before {
            background-position: 30% calc(var(--parallax-offset-y, 0px) + 50%);
            background-size: cover;
        }
    }

    .nombre-hero {
        position: absolute;
        bottom: 2rem;
        left: 0;
        width: 100%;
        text-align: center;
        font-size: 2.5rem;
        color: var(--blanco-puro);
    }
</style>

<script>
    // Animation d'entrée au scroll
    function animateOnScroll() {
        const elements = document.querySelectorAll('.animate-on-scroll');
        
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const element = entry.target as HTMLElement;
                    const delay = parseInt(element.dataset.delay || '0');
                    
                    setTimeout(() => {
                        element.classList.add('animate-in');
                    }, delay * 1000);
                }
            });
        }, {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        });
        
        elements.forEach(element => {
            observer.observe(element);
        });
    }

    // Efecto Parallax
    function initParallax() {
        const heroSection = document.getElementById('hero-section');
        if (!heroSection) return;

        let ticking = false;
        
        function updateParallax() {
            const offsetY = window.scrollY * 0.3; // Reducido de 0.5 a 0.2 para un movimiento más sutil
            if (heroSection) {
                heroSection.style.setProperty('--parallax-offset-y', `${offsetY}px`);
            }
            ticking = false;
        }

        window.addEventListener('scroll', () => {
            if (!ticking) {
                window.requestAnimationFrame(() => {
                    updateParallax();
                });
                ticking = true;
            }
        });
    }
    
    // Initialiser les animations
    document.addEventListener('DOMContentLoaded', () => {
        animateOnScroll();
        initParallax();
    });
</script>